--- memcacheq/bdb.c	2011-03-31 13:36:47.000000000 +0800
+++ orderedq/bdb.c	2011-03-31 14:15:30.000000000 +0800
@@ -1,12 +1,12 @@
 /* -*- Mode: C; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*- */
 /*
- *  MemcacheQ - Simple Queue Service over Memcache
+ *  PmemcacheQ - Simple Priority Queue Service over Memcache
  *
- *      http://memcacheq.googlecode.com
+ *      http://github.com/tuzik/memcacheq
  *
- *  The source code of MemcacheQ is most based on MemcachDB:
+ *  The source code of OmemcacheQ is most based on MemcachQ:
  *
- *      http://memcachedb.googlecode.com
+ *      http://memcacheq.googlecode.com
  *
  *  Copyright 2008 Steve Chu.  All rights reserved.
  *
@@ -15,6 +15,7 @@
  *
  *  Authors:
  *      Steve Chu <stvchu@gmail.com>
+ *		Tuzik Gaffey <tuzik@love.com>
  *
  */
 
@@ -74,13 +75,13 @@
 void bdb_settings_init(void){
     bdb_settings.env_home = DBHOME;
     bdb_settings.cache_size = 64 * 1024 * 1024; /* default is 64MB */ 
-    bdb_settings.txn_lg_bsize = 32 * 1024; /* default is 32KB */ 
+    //bdb_settings.txn_lg_bsize = 32 * 1024; /* default is 32KB */ 
     
     bdb_settings.re_len = 1024;
-    bdb_settings.q_extentsize = 16 * 1024; // 64MB extent file each
+    //bdb_settings.q_extentsize = 16 * 1024; // 64MB extent file each
     
     bdb_settings.page_size = 4096;  /* default is 4K */
-    bdb_settings.txn_nosync = 0; /* default DB_TXN_NOSYNC is off */
+    //bdb_settings.txn_nosync = 0; /* default DB_TXN_NOSYNC is off */
     bdb_settings.log_auto_remove = 0; 
     bdb_settings.deadlock_detect_val = 100 * 1000; /* default is 100 millisecond */
     bdb_settings.checkpoint_val = 60 * 5; /* seconds */
@@ -112,10 +113,7 @@
     /* set MPOOL size */
     envp->set_cachesize(envp, 0, bdb_settings.cache_size, 0);
 
-    /* set DB_TXN_NOSYNC flag */
-    if (bdb_settings.txn_nosync){
-        envp->set_flags(envp, DB_TXN_NOSYNC, 1);
-    }
+
     /* Auto remove log */
     if (bdb_settings.log_auto_remove) {
         envp->log_set_config(envp, DB_LOG_AUTO_REMOVE, 1);        
@@ -126,8 +124,6 @@
     envp->set_lk_max_locks(envp, 40000);
     envp->set_lk_max_objects(envp, 40000);
     
-    /* at least max active transactions */
-  	envp->set_tx_max(envp, 40000);
   	
     /* set transaction log buffer */
     envp->set_lg_bsize(envp, bdb_settings.txn_lg_bsize);
@@ -169,11 +165,10 @@
     CHECK_DB_RET(ret);
 
     /* Open and Iterate */
-    ret = envp->txn_begin(envp, NULL, &txnp, 0);
-    CHECK_DB_RET(ret);
-    ret = qlist_dbp->open(qlist_dbp, txnp, "queue.list", NULL, DB_BTREE, DB_CREATE, 0664);
+
+    ret = qlist_dbp->open(qlist_dbp, NULL, "queue.list", NULL, DB_BTREE, DB_CREATE, 0664);
     CHECK_DB_RET(ret);
-    ret = qlist_dbp->cursor(qlist_dbp, txnp, &cursorp, 0); 
+    ret = qlist_dbp->cursor(qlist_dbp, NULL, &cursorp, 0); 
     CHECK_DB_RET(ret);
     DBT dbkey, dbdata;
     char qname[512];
@@ -189,7 +184,7 @@
     dbdata.flags = DB_DBT_USERMEM;
     
     while ((ret = cursorp->get(cursorp, &dbkey, &dbdata, DB_NEXT)) == 0) {
-        open_exsited_queue_db(txnp, qname, &qs);
+        open_exsited_queue_db(NULL, qname, &qs);
     }
     if (ret != DB_NOTFOUND) {
         goto dberr;
@@ -198,17 +193,13 @@
     ret = cursorp->close(cursorp);
     CHECK_DB_RET(ret);
     
-    ret = txnp->commit(txnp, 0);
-    CHECK_DB_RET(ret);
     return;
         
 dberr:
     if (cursorp != NULL){
         cursorp->close(cursorp);
     }
-    if (txnp != NULL){
-        txnp->abort(txnp);
-    }
+
     fprintf(stderr, "bdb_qlist_db_open: %s\n", db_strerror(ret));
     exit(EXIT_FAILURE);
 }
@@ -223,13 +214,20 @@
 
     /* init hash_key and hash_value */
     q->dbp = NULL;
+    q->dbpc = NULL;
     q->set_hits = q->old_set_hits = qsp->set_hits;
     q->get_hits = q->old_get_hits = qsp->get_hits;
     pthread_mutex_init(&(q->lock), NULL);
     
     ret = db_create(&(q->dbp), envp, 0);
-    CHECK_DB_RET(ret);    
-    ret = q->dbp->open(q->dbp, txnp, queue_name, NULL, DB_QUEUE, DB_CREATE, 0664);         
+    CHECK_DB_RET(ret);
+    
+    ret = q->dbp->set_flags(q->dbp, DB_DUP | DB_DUPSORT);
+    CHECK_DB_RET(ret);
+
+    ret = q->dbp->open(q->dbp, NULL, queue_name, NULL, DB_BTREE, DB_CREATE, 0664);         
+    CHECK_DB_RET(ret);
+    ret = q->dbp->cursor(q->dbp,NULL,&(q->dbpc),0);
     CHECK_DB_RET(ret);
     
     int result = hashtable_insert(qlist_htp, (void *)k, (void *)q);
@@ -252,11 +250,13 @@
     {
         do {
             q = hashtable_iterator_value(itr);
+            q->dbpc->close(q->dbpc);
             q->dbp->close(q->dbp, 0);
             pthread_mutex_destroy(&(q->lock));
         } while (hashtable_iterator_advance(itr));
     }
     free(itr);
+    
     if (qlist_dbp != NULL) {
         qlist_dbp->close(qlist_dbp, 0);        
     }
@@ -270,6 +270,7 @@
     assert(q != NULL);
 
     q->dbp = NULL;
+    q->dbpc = NULL;
     q->set_hits = q->old_set_hits = 0;
     q->get_hits = q->old_get_hits = 0;
     pthread_mutex_init(&(q->lock), NULL);
@@ -278,19 +279,14 @@
     DB_TXN *txnp = NULL;
     ret = db_create(&(q->dbp), envp, 0);
     CHECK_DB_RET(ret);
-
-    if (bdb_settings.q_extentsize != 0){
-        ret = q->dbp->set_q_extentsize(q->dbp, bdb_settings.q_extentsize);
-        CHECK_DB_RET(ret);
-    }
-    ret = q->dbp->set_re_len(q->dbp, bdb_settings.re_len);
-    CHECK_DB_RET(ret);
-    ret = q->dbp->set_pagesize(q->dbp, bdb_settings.page_size);
+    
+    ret = q->dbp->set_flags(q->dbp, DB_DUP | DB_DUPSORT);
     CHECK_DB_RET(ret);
 
-    ret = envp->txn_begin(envp, NULL, &txnp, 0);
+    ret = q->dbp->open(q->dbp, NULL, queue_name, NULL, DB_BTREE, DB_CREATE, 0664); 
     CHECK_DB_RET(ret);
-    ret = q->dbp->open(q->dbp, txnp, queue_name, NULL, DB_QUEUE, DB_CREATE, 0664); 
+
+    ret = q->dbp->cursor(q->dbp, NULL, &(q->dbpc), 0);
     CHECK_DB_RET(ret);
     
     DBT dbkey,dbdata;
@@ -301,17 +297,16 @@
     dbkey.size = strlen(queue_name)+1;
     dbdata.data = (void *)&qs;
     dbdata.size = sizeof(qstats_t);
-    ret = qlist_dbp->put(qlist_dbp, txnp, &dbkey, &dbdata, 0);
-    CHECK_DB_RET(ret);
-    ret = txnp->commit(txnp, 0);
+    ret = qlist_dbp->put(qlist_dbp, NULL, &dbkey, &dbdata, 0);
     CHECK_DB_RET(ret);
+
     int result = hashtable_insert(qlist_htp, (void *)k, (void *)q);
     assert(result != 0);
     return 0;
 dberr:
-    if (txnp != NULL){
-        txnp->abort(txnp);
-    }
+    //if (txnp != NULL){
+    //    txnp->abort(txnp);
+    //}
     fprintf(stderr, "bdb_create_queue: %s %s\n", queue_name, db_strerror(ret));
     return -1;
 }
@@ -325,6 +320,7 @@
         return 1;
     } 
     /* Found, just close and remove it. */
+    q->dbpc->close(q->dbpc);
     q->dbp->close(q->dbp, 0);
     pthread_mutex_destroy(&(q->lock));
     q = hashtable_remove(qlist_htp, (void *)queue_name);
@@ -333,24 +329,20 @@
     
     int ret;
     DB_TXN *txnp = NULL;
-    ret = envp->txn_begin(envp, NULL, &txnp, 0);
-    CHECK_DB_RET(ret);
-    ret = envp->dbremove(envp, txnp, queue_name, NULL, 0);
+
+    ret = envp->dbremove(envp, NULL, queue_name, NULL, 0);
     CHECK_DB_RET(ret);
     DBT dbkey;
     memset(&dbkey, 0, sizeof(dbkey));
     dbkey.data = (void *)queue_name;
     dbkey.size = strlen(queue_name) + 1;
-    ret = qlist_dbp->del(qlist_dbp, txnp, &dbkey, 0);
-    CHECK_DB_RET(ret);
-    ret = txnp->commit(txnp, 0);
+    ret = qlist_dbp->del(qlist_dbp, NULL, &dbkey, 0);
     CHECK_DB_RET(ret);
+
     pthread_rwlock_unlock(&qlist_ht_lock);
     return 0;
 dberr:
-    if (txnp != NULL){
-        txnp->abort(txnp);
-    }
+
     fprintf(stderr, "bdb_delete_queue: %s %s\n", queue_name, db_strerror(ret));
     pthread_rwlock_unlock(&qlist_ht_lock);
     return -1;
@@ -404,8 +396,7 @@
     DBT dbkey, dbdata;
     int ret;
     DB_TXN *txnp = NULL;
-    ret = envp->txn_begin(envp, NULL, &txnp, 0);
-    CHECK_DB_RET(ret);
+
     itr = hashtable_iterator(qstats_htp);
     assert(itr != NULL);
     if (hashtable_count(qstats_htp) > 0)
@@ -418,7 +409,7 @@
             dbkey.size = strlen(kk) + 1;
             dbdata.data = (void *)s;
             dbdata.size = sizeof(qstats_t);
-            ret = qlist_dbp->put(qlist_dbp, txnp, &dbkey, &dbdata, 0);
+            ret = qlist_dbp->put(qlist_dbp, NULL, &dbkey, &dbdata, 0);
             CHECK_DB_RET(ret);
             fprintf(stderr, "dump stats[%s], set_hits: %lld, get_hits: %lld \n",
                     kk, s->set_hits, s->get_hits);
@@ -426,8 +417,7 @@
     }
     free(itr);
     itr = NULL;
-    ret = txnp->commit(txnp, 0);
-    CHECK_DB_RET(ret);
+
 
     hashtable_destroy(qstats_htp, 1);
     qstats_htp = NULL;
@@ -439,9 +429,7 @@
     if (qstats_htp != NULL) {
         hashtable_destroy(qstats_htp, 1);
     }
-    if (txnp != NULL){
-        txnp->abort(txnp);
-    }
+
     if (settings.verbose > 1) {
         fprintf(stderr, "dump_qstats_to_db: %s\n", db_strerror(ret));
     }
@@ -489,15 +477,17 @@
     item *it = NULL;
     DB_TXN *txnp = NULL;
     int ret;
-    
+
+
     queue_t *q = (queue_t *)hashtable_search(qlist_htp, (void *)key);
     /* queue not exsited */
     if (q == NULL) {
         pthread_rwlock_unlock(&qlist_ht_lock);            
         return NULL;
     } else {
-        DBT dbkey, dbdata;
-        db_recno_t recno;
+        DBT dbckey, dbcdata, dbkey, dbdata;
+        
+        
 
         /* first, alloc a fixed size */
         it = item_alloc2();
@@ -507,19 +497,29 @@
         }
 
         BDB_CLEANUP_DBT();
-        dbkey.data = &recno;
-        dbkey.ulen = sizeof(recno);
+        memset(&dbckey, 0, sizeof(DBT));
+        memset(&dbcdata, 0, sizeof(DBT));
+        
+        ret = q->dbpc->get(q->dbpc, &dbckey, &dbcdata, DB_NEXT);
+        CHECK_DB_RET(ret);
+    
+        memset(&dbkey, 0, sizeof(DBT));
+        memset(&dbdata, 0, sizeof(DBT));
+
+        dbkey.data = (char *)dbckey.data;
+        dbkey.size = strlen(dbkey.data) + 1;
         dbkey.flags = DB_DBT_USERMEM;
         dbdata.ulen = bdb_settings.re_len;
         dbdata.data = it;
         dbdata.flags = DB_DBT_USERMEM;
 
-        ret = envp->txn_begin(envp, NULL, &txnp, 0);
+        ret = q->dbp->get(q->dbp, NULL, &dbkey, &dbdata, 0);
         CHECK_DB_RET(ret);
-        ret = q->dbp->get(q->dbp, txnp, &dbkey, &dbdata, DB_CONSUME);
-        CHECK_DB_RET(ret);
-        ret = txnp->commit(txnp, 0);
+
+        
+        ret = q->dbpc->del(q->dbpc,0);
         CHECK_DB_RET(ret);
+
         pthread_mutex_lock(&(q->lock));
         (q->get_hits)++;
         pthread_mutex_unlock(&(q->lock));
@@ -529,9 +529,8 @@
 dberr:
     item_free(it);
     it = NULL;
-    if (txnp != NULL){
-        txnp->abort(txnp);
-    }
+
+    
     if (settings.verbose > 1) {
         fprintf(stderr, "bdb_get: %s\n", db_strerror(ret));
     }
@@ -544,7 +543,12 @@
 */
 int bdb_set(char *key, item *it){
     pthread_rwlock_rdlock(&qlist_ht_lock);
-    queue_t *q = (queue_t *)hashtable_search(qlist_htp, (void *)key);
+
+    char *hashkey;
+    hashkey = strtok(key,"#");
+    key += strlen(hashkey) + 1;
+
+    queue_t *q = (queue_t *)hashtable_search(qlist_htp, (void *)hashkey);
     DB_TXN *txnp = NULL;
     int ret;
 
@@ -552,29 +556,28 @@
         pthread_rwlock_unlock(&qlist_ht_lock);
         /* switch to write lock */
         pthread_rwlock_wrlock(&qlist_ht_lock);
-        ret = bdb_create_queue(key);
+        ret = bdb_create_queue(hashkey);
         if (0 != ret){
             return -1;
         }
         /* search again */
-        q = (queue_t *)hashtable_search(qlist_htp, (void *)key);        
+        q = (queue_t *)hashtable_search(qlist_htp, (void *)hashkey);        
     }
     
     if (NULL != q) {
-        db_recno_t recno;
+        //db_recno_t recno;
         DBT dbkey, dbdata;    
         BDB_CLEANUP_DBT();
-        dbkey.data = &recno;
-        dbkey.ulen = sizeof(recno);
+        dbkey.data = key;
+        dbkey.size = strlen(key) + 1;
         dbkey.flags = DB_DBT_USERMEM;
         dbdata.data = it;
         dbdata.size = ITEM_ntotal(it);
-        ret = envp->txn_begin(envp, NULL, &txnp, 0);
-        CHECK_DB_RET(ret);
-        ret = q->dbp->put(q->dbp, txnp, &dbkey, &dbdata, DB_APPEND);
-        CHECK_DB_RET(ret);
-        ret = txnp->commit(txnp, 0);
+
+
+        ret = q->dbp->put(q->dbp, NULL, &dbkey, &dbdata, DB_NODUPDATA);
         CHECK_DB_RET(ret);
+
         pthread_mutex_lock(&(q->lock));
         (q->set_hits)++;
         pthread_mutex_unlock(&(q->lock));
@@ -582,9 +585,7 @@
     pthread_rwlock_unlock(&qlist_ht_lock);    
     return 0;
 dberr:
-    if (txnp != NULL){
-        txnp->abort(txnp);
-    }
+
     if (settings.verbose > 1) {
         fprintf(stderr, "bdb_set: %s\n", db_strerror(ret));
     }
--- memcacheq/memcacheq.h	2011-03-31 13:36:47.000000000 +0800
+++ orderedq/memcacheq.h	2011-03-30 23:14:01.000000000 +0800
@@ -240,6 +240,7 @@
 
 typedef struct _queue {
   DB* dbp;
+  DBC* dbpc;
   int64_t set_hits;
   int64_t get_hits;
   int64_t old_set_hits;
